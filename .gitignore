venv/
out/*

mkdir -p scripts
cat > scripts/run_full_eval.sh <<'BASH'
set -euo pipefail



for A in "${ARTS[@]}"; do
  echo "[sample] ${A}"
  python sample.py --ckpt "${CKPT_EMA}" --use_ema \
    --n 3000 --steps 80 --guidance 1.5 \
    --artifact "${A}" --intensity 0.6 --seizure 0 --age_bin 1 --montage_id 0 \
    --out_dir "${RUN_DIR}/synth_${A}" --save_npy --batch 256 --cond_dim 13
done

EVAL_DIR="out/clf_eval_${STAMP}"
mkdir -p "${EVAL_DIR}"

for A in "${ARTS[@]}"; do
  FDIR="${RUN_DIR}/synth_${A}"
  echo "[eval:psd/cov_acf] ${A}"
  python -m eval.psd --real_dir out/npz --fake_dir "${FDIR}" --split test \
    --out "${EVAL_DIR}/psd_${A}.json"
  python -m eval.cov_acf --real_dir out/npz --fake_dir "${FDIR}" --split test \
    --out "${EVAL_DIR}/covacf_${A}.json"
done

ARCHS=(tiny resnet1d eegnet)
for A in "${ARTS[@]}"; do
  FDIR="${RUN_DIR}/synth_${A}"
  for ARCH in "${ARCHS[@]}"; do
    echo "[eval:recovery] ${A} | ${ARCH}"
    python -m eval.classifier_eval --real_dir out/npz --fake_dir "${FDIR}" \
      --task artifact --arch "${ARCH}" \
      --out "${EVAL_DIR}/recovery_${A}_${ARCH}.json" --recovery_only
  done
done

for A in shiver electrode; do
  FDIR="${RUN_DIR}/synth_${A}"
  for ARCH in "${ARCHS[@]}"; do
    echo "[eval:augment] ${A} | ${ARCH}"
    python -m eval.classifier_eval --real_dir out/npz --fake_dir "${FDIR}" \
      --task artifact --arch "${ARCH}" --augment "${A}" \
      --out "${EVAL_DIR}/augment_gain_${A}_${ARCH}.json"
  done
done

for A in "${ARTS[@]}"; do
  FDIR="${RUN_DIR}/synth_${A}"
  echo "[eval:extra] ${A}"
  python -m eval.extra_metrics --real_dir out/npz --fake_dir "${FDIR}" --split test \
    --out "${EVAL_DIR}/extra_${A}.json"
done

python - <<'PY'
import os, glob, json
RUN_DIR=os.environ["RUN_DIR"]
EVAL_DIR=os.environ["EVAL_DIR"]
arts=["none","eye","muscle","chewing","shiver","electrode","movement"]
archs=["tiny","resnet1d","eegnet"]

def J(p):
    try:
        with open(p,"r") as f: return json.load(f)
    except: return {}

lines=[]

lines+=["# Table 1 — Fidelity",
        "| Artifact | Δδ | Δθ | Δα | Δβ | Cov Fro ↓ | ACF L2 ↓ | n_fake |",
        "|---|---:|---:|---:|---:|---:|---:|---:|"]
for A in arts:
    psd=J(os.path.join(EVAL_DIR,f"psd_{A}.json"))
    cov=J(os.path.join(EVAL_DIR,f"covacf_{A}.json"))
    bre=psd.get("band_rel_err",{})
    covfro=cov.get("cov_fro",0.0)
    acf=cov.get("acf_l2",0.0)
    nfake=psd.get("n_fake",0)
    def fmt(x): 
        try: return f"{float(x):.3f}"
        except: return "nan"
    lines.append(f"| {A} | {fmt(bre.get('delta',0))} | {fmt(bre.get('theta',0))} | {fmt(bre.get('alpha',0))} | {fmt(bre.get('beta',0))} | {fmt(covfro)} | {int(acf)} | {nfake} |")

lines+=["","## Table 2 — Specificity (recovery)"]
for A in arts:
    lines.append(f"### {A}")
    for arch in archs:
        r=J(os.path.join(EVAL_DIR,f"recovery_{A}_{arch}.json"))
        rec=r.get("recovery",{})
        mf=rec.get("macro_f1",0.0)
        im=rec.get("intended_match",0.0) or 0.0
        acc=rec.get("acc",0.0)
        n_fake=rec.get("n_fake",0)
        lines.append(f"- **{arch}**: F1={mf:.3f}, Acc={acc:.3f}, IM={im:.3f}, n_fake={n_fake}")
    lines.append("")

lines+=["## Table 3 — Utility (augmentation gains)"]
for A in ["electrode","shiver"]:
    for arch in archs:
        p=os.path.join(EVAL_DIR,f"augment_gain_{A}_{arch}.json")
        j=J(p)
        aug=j.get("augmentation",{})
        if aug:
            df1=aug.get("delta_macro_f1",0.0)
            da=aug.get("delta_acc",0.0)
            ntr=aug.get("n_train_aug",0)
            lines.append(f"- **{A}** ({arch}): ΔF1={df1:+.3f}, ΔAcc={da:+.3f} (n_train_aug={ntr})")

lines+=["","## Extra Metrics (features) — per artifact",
        "| Artifact | FFD ↓ | MMD (RBF) ↓ | kNN-Prec ↑ | kNN-Rec ↑ | 1-NN Acc → 0.5 |",
        "|---|---:|---:|---:|---:|---:|"]
for A in arts:
    e=J(os.path.join(EVAL_DIR,f"extra_{A}.json"))
    ffd=e.get("ffd",e.get("FID_like",0.0))
    mmd=e.get("mmd_rbf",e.get("mmd",0.0))
    kp=e.get("knn_prec",0.0)
    kr=e.get("knn_rec",0.0)
    nn=e.get("one_nn_acc",e.get("nn1_acc",0.0))
    lines.append(f"| {A} | {ffd:.3f} | {mmd:.4f} | {kp:.3f} | {kr:.3f} | {nn:.3f} |")

outp=os.path.join(EVAL_DIR,"summary_tables.md")
open(outp,"w").write("\n".join(lines))
print("Wrote", outp)
PY

echo
echo "============================"
echo "DONE."
echo "Samples:   ${RUN_DIR}"
echo "Eval out:  ${EVAL_DIR}"
echo "Summary:   ${EVAL_DIR}/summary_tables.md"
echo "============================"
BASH

chmod +x scripts/run_full_eval.sh
export RUN_DIR=""; export EVAL_DIR="";
./scripts/run_full_eval.sh
